//
// Erc20Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Erc20Response: Codable, JSONEncodable, Hashable {

    public var moonScanUrl: String?
    public var transactionHash: String
    public var signedTransaction: String
    public var signedMessage: String?
    public var rawTransaction: String?
    public var signature: String?
    public var transaction: [String: Tx]?
    public var userOps: [TransactionRequest]?
    public var useropTransaction: String?
    public var name: String?
    public var symbol: String?
    public var decimals: String?
    public var totalSupply: String?
    public var contractAddress: String?
    public var balanceOf: String?
    public var allowance: String?

    public init(moonScanUrl: String? = nil, transactionHash: String, signedTransaction: String, signedMessage: String? = nil, rawTransaction: String? = nil, signature: String? = nil, transaction: [String: Tx]? = nil, userOps: [TransactionRequest]? = nil, useropTransaction: String? = nil, name: String? = nil, symbol: String? = nil, decimals: String? = nil, totalSupply: String? = nil, contractAddress: String? = nil, balanceOf: String? = nil, allowance: String? = nil) {
        self.moonScanUrl = moonScanUrl
        self.transactionHash = transactionHash
        self.signedTransaction = signedTransaction
        self.signedMessage = signedMessage
        self.rawTransaction = rawTransaction
        self.signature = signature
        self.transaction = transaction
        self.userOps = userOps
        self.useropTransaction = useropTransaction
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.totalSupply = totalSupply
        self.contractAddress = contractAddress
        self.balanceOf = balanceOf
        self.allowance = allowance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case moonScanUrl = "moon_scan_url"
        case transactionHash = "transaction_hash"
        case signedTransaction = "signed_transaction"
        case signedMessage = "signed_message"
        case rawTransaction = "raw_transaction"
        case signature
        case transaction
        case userOps
        case useropTransaction = "userop_transaction"
        case name
        case symbol
        case decimals
        case totalSupply
        case contractAddress = "contract_address"
        case balanceOf
        case allowance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(moonScanUrl, forKey: .moonScanUrl)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(signedTransaction, forKey: .signedTransaction)
        try container.encodeIfPresent(signedMessage, forKey: .signedMessage)
        try container.encodeIfPresent(rawTransaction, forKey: .rawTransaction)
        try container.encodeIfPresent(signature, forKey: .signature)
        try container.encodeIfPresent(transaction, forKey: .transaction)
        try container.encodeIfPresent(userOps, forKey: .userOps)
        try container.encodeIfPresent(useropTransaction, forKey: .useropTransaction)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(decimals, forKey: .decimals)
        try container.encodeIfPresent(totalSupply, forKey: .totalSupply)
        try container.encodeIfPresent(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(balanceOf, forKey: .balanceOf)
        try container.encodeIfPresent(allowance, forKey: .allowance)
    }
}

