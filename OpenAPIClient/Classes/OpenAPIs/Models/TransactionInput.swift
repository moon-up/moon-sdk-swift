//
// TransactionInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TransactionInput: Codable, JSONEncodable, Hashable {

    public var supportedParams: TransactionInputSupportedParams
    public var wallet: TransactionInputWallet
    public var metaData: TransactionInputMetaData
    public var originatingHost: String
    public var partnerContext: String
    public var uuid: String
    public var network: String
    public var paymentMethod: String
    public var type: String
    public var amount: Double
    public var destination: String
    public var source: String
    public var onramp: String

    public init(supportedParams: TransactionInputSupportedParams, wallet: TransactionInputWallet, metaData: TransactionInputMetaData, originatingHost: String, partnerContext: String, uuid: String, network: String, paymentMethod: String, type: String, amount: Double, destination: String, source: String, onramp: String) {
        self.supportedParams = supportedParams
        self.wallet = wallet
        self.metaData = metaData
        self.originatingHost = originatingHost
        self.partnerContext = partnerContext
        self.uuid = uuid
        self.network = network
        self.paymentMethod = paymentMethod
        self.type = type
        self.amount = amount
        self.destination = destination
        self.source = source
        self.onramp = onramp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case supportedParams
        case wallet
        case metaData
        case originatingHost
        case partnerContext
        case uuid
        case network
        case paymentMethod
        case type
        case amount
        case destination
        case source
        case onramp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(supportedParams, forKey: .supportedParams)
        try container.encode(wallet, forKey: .wallet)
        try container.encode(metaData, forKey: .metaData)
        try container.encode(originatingHost, forKey: .originatingHost)
        try container.encode(partnerContext, forKey: .partnerContext)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(network, forKey: .network)
        try container.encode(paymentMethod, forKey: .paymentMethod)
        try container.encode(type, forKey: .type)
        try container.encode(amount, forKey: .amount)
        try container.encode(destination, forKey: .destination)
        try container.encode(source, forKey: .source)
        try container.encode(onramp, forKey: .onramp)
    }
}

