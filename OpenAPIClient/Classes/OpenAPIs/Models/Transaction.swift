//
// Transaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Transaction: Codable, JSONEncodable, Hashable {

    public var transactionHash: String?
    public var signedTransaction: String?
    public var rawTransaction: String?
    public var data: String?
    public var transactions: [TransactionData]?
    public var moonScanUrl: String?
    public var signature: String?
    public var transaction: Tx?
    public var userOps: [TransactionRequest]?
    public var useropTransaction: String?

    public init(transactionHash: String? = nil, signedTransaction: String? = nil, rawTransaction: String? = nil, data: String? = nil, transactions: [TransactionData]? = nil, moonScanUrl: String? = nil, signature: String? = nil, transaction: Tx? = nil, userOps: [TransactionRequest]? = nil, useropTransaction: String? = nil) {
        self.transactionHash = transactionHash
        self.signedTransaction = signedTransaction
        self.rawTransaction = rawTransaction
        self.data = data
        self.transactions = transactions
        self.moonScanUrl = moonScanUrl
        self.signature = signature
        self.transaction = transaction
        self.userOps = userOps
        self.useropTransaction = useropTransaction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactionHash = "transaction_hash"
        case signedTransaction = "signed_transaction"
        case rawTransaction = "raw_transaction"
        case data
        case transactions
        case moonScanUrl = "moon_scan_url"
        case signature
        case transaction
        case userOps
        case useropTransaction = "userop_transaction"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(transactionHash, forKey: .transactionHash)
        try container.encodeIfPresent(signedTransaction, forKey: .signedTransaction)
        try container.encodeIfPresent(rawTransaction, forKey: .rawTransaction)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(transactions, forKey: .transactions)
        try container.encodeIfPresent(moonScanUrl, forKey: .moonScanUrl)
        try container.encodeIfPresent(signature, forKey: .signature)
        try container.encodeIfPresent(transaction, forKey: .transaction)
        try container.encodeIfPresent(userOps, forKey: .userOps)
        try container.encodeIfPresent(useropTransaction, forKey: .useropTransaction)
    }
}

