//
// INFTApproval.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct INFTApproval: Codable, JSONEncodable, Hashable {

    public var transactionHash: String
    public var contract: String
    public var logIndex: String
    public var tokenContractType: String
    public var tokenName: String
    public var tokenSymbol: String
    public var account: String
    public var _operator: String
    public var approvedAll: Bool
    public var tokenId: String?

    public init(transactionHash: String, contract: String, logIndex: String, tokenContractType: String, tokenName: String, tokenSymbol: String, account: String, _operator: String, approvedAll: Bool, tokenId: String?) {
        self.transactionHash = transactionHash
        self.contract = contract
        self.logIndex = logIndex
        self.tokenContractType = tokenContractType
        self.tokenName = tokenName
        self.tokenSymbol = tokenSymbol
        self.account = account
        self._operator = _operator
        self.approvedAll = approvedAll
        self.tokenId = tokenId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactionHash
        case contract
        case logIndex
        case tokenContractType
        case tokenName
        case tokenSymbol
        case account
        case _operator = "operator"
        case approvedAll
        case tokenId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(contract, forKey: .contract)
        try container.encode(logIndex, forKey: .logIndex)
        try container.encode(tokenContractType, forKey: .tokenContractType)
        try container.encode(tokenName, forKey: .tokenName)
        try container.encode(tokenSymbol, forKey: .tokenSymbol)
        try container.encode(account, forKey: .account)
        try container.encode(_operator, forKey: ._operator)
        try container.encode(approvedAll, forKey: .approvedAll)
        try container.encode(tokenId, forKey: .tokenId)
    }
}

