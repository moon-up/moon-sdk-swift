//
// AbiItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The abi to parse the log object of the contract */
public struct AbiItem: Codable, JSONEncodable, Hashable {

    public var anonymous: Bool?
    public var constant: Bool?
    public var inputs: [AbiInput]?
    public var name: String?
    public var outputs: [AbiOutput]?
    public var payable: Bool?
    public var stateMutability: String?
    public var type: String
    public var gas: Double?

    public init(anonymous: Bool? = nil, constant: Bool? = nil, inputs: [AbiInput]? = nil, name: String? = nil, outputs: [AbiOutput]? = nil, payable: Bool? = nil, stateMutability: String? = nil, type: String, gas: Double? = nil) {
        self.anonymous = anonymous
        self.constant = constant
        self.inputs = inputs
        self.name = name
        self.outputs = outputs
        self.payable = payable
        self.stateMutability = stateMutability
        self.type = type
        self.gas = gas
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case anonymous
        case constant
        case inputs
        case name
        case outputs
        case payable
        case stateMutability
        case type
        case gas
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(anonymous, forKey: .anonymous)
        try container.encodeIfPresent(constant, forKey: .constant)
        try container.encodeIfPresent(inputs, forKey: .inputs)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(outputs, forKey: .outputs)
        try container.encodeIfPresent(payable, forKey: .payable)
        try container.encodeIfPresent(stateMutability, forKey: .stateMutability)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(gas, forKey: .gas)
    }
}

