//
// GetSwapDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetSwapDto: Codable, JSONEncodable, Hashable {

    public var src: String
    public var dst: String
    public var amount: String
    public var from: String
    public var slippage: Double
    public var protocols: String?
    public var fee: String?
    public var disableEstimate: Bool?
    public var permit: String?
    public var includeTokensInfo: Bool?
    public var includeProtocols: Bool?
    public var compatibility: Bool?
    public var allowPartialFill: Bool?
    public var parts: String?
    public var mainRouteParts: String?
    public var connectorTokens: String?
    public var complexityLevel: String?
    public var gasLimit: String?
    public var gasPrice: String?
    public var referrer: String?
    public var receiver: String?
    public var chainId: Double?

    public init(src: String, dst: String, amount: String, from: String, slippage: Double, protocols: String? = nil, fee: String? = nil, disableEstimate: Bool? = nil, permit: String? = nil, includeTokensInfo: Bool? = nil, includeProtocols: Bool? = nil, compatibility: Bool? = nil, allowPartialFill: Bool? = nil, parts: String? = nil, mainRouteParts: String? = nil, connectorTokens: String? = nil, complexityLevel: String? = nil, gasLimit: String? = nil, gasPrice: String? = nil, referrer: String? = nil, receiver: String? = nil, chainId: Double? = nil) {
        self.src = src
        self.dst = dst
        self.amount = amount
        self.from = from
        self.slippage = slippage
        self.protocols = protocols
        self.fee = fee
        self.disableEstimate = disableEstimate
        self.permit = permit
        self.includeTokensInfo = includeTokensInfo
        self.includeProtocols = includeProtocols
        self.compatibility = compatibility
        self.allowPartialFill = allowPartialFill
        self.parts = parts
        self.mainRouteParts = mainRouteParts
        self.connectorTokens = connectorTokens
        self.complexityLevel = complexityLevel
        self.gasLimit = gasLimit
        self.gasPrice = gasPrice
        self.referrer = referrer
        self.receiver = receiver
        self.chainId = chainId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case src
        case dst
        case amount
        case from
        case slippage
        case protocols
        case fee
        case disableEstimate
        case permit
        case includeTokensInfo
        case includeProtocols
        case compatibility
        case allowPartialFill
        case parts
        case mainRouteParts
        case connectorTokens
        case complexityLevel
        case gasLimit
        case gasPrice
        case referrer
        case receiver
        case chainId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(src, forKey: .src)
        try container.encode(dst, forKey: .dst)
        try container.encode(amount, forKey: .amount)
        try container.encode(from, forKey: .from)
        try container.encode(slippage, forKey: .slippage)
        try container.encodeIfPresent(protocols, forKey: .protocols)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(disableEstimate, forKey: .disableEstimate)
        try container.encodeIfPresent(permit, forKey: .permit)
        try container.encodeIfPresent(includeTokensInfo, forKey: .includeTokensInfo)
        try container.encodeIfPresent(includeProtocols, forKey: .includeProtocols)
        try container.encodeIfPresent(compatibility, forKey: .compatibility)
        try container.encodeIfPresent(allowPartialFill, forKey: .allowPartialFill)
        try container.encodeIfPresent(parts, forKey: .parts)
        try container.encodeIfPresent(mainRouteParts, forKey: .mainRouteParts)
        try container.encodeIfPresent(connectorTokens, forKey: .connectorTokens)
        try container.encodeIfPresent(complexityLevel, forKey: .complexityLevel)
        try container.encodeIfPresent(gasLimit, forKey: .gasLimit)
        try container.encodeIfPresent(gasPrice, forKey: .gasPrice)
        try container.encodeIfPresent(referrer, forKey: .referrer)
        try container.encodeIfPresent(receiver, forKey: .receiver)
        try container.encodeIfPresent(chainId, forKey: .chainId)
    }
}

