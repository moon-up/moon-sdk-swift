//
// AaveInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AaveInput: Codable, JSONEncodable, Hashable {

    public var to: String?
    public var data: String?
    public var input: String?
    public var value: String?
    public var nonce: String?
    public var gas: String?
    public var gasPrice: String?
    public var chainId: String?
    public var encoding: String?
    public var EOA: Bool?
    public var contractAddress: String?
    public var tokenId: String?
    public var tokenIds: String?
    public var approved: Bool?
    public var broadcast: Bool?
    public var lendingPool: String?
    public var amount: String?
    public var atokenToRedeeem: String?
    public var refCode: String?
    public var interestRateMode: String?

    public init(to: String? = nil, data: String? = nil, input: String? = nil, value: String? = nil, nonce: String? = nil, gas: String? = nil, gasPrice: String? = nil, chainId: String? = nil, encoding: String? = nil, EOA: Bool? = nil, contractAddress: String? = nil, tokenId: String? = nil, tokenIds: String? = nil, approved: Bool? = nil, broadcast: Bool? = nil, lendingPool: String? = nil, amount: String? = nil, atokenToRedeeem: String? = nil, refCode: String? = nil, interestRateMode: String? = nil) {
        self.to = to
        self.data = data
        self.input = input
        self.value = value
        self.nonce = nonce
        self.gas = gas
        self.gasPrice = gasPrice
        self.chainId = chainId
        self.encoding = encoding
        self.EOA = EOA
        self.contractAddress = contractAddress
        self.tokenId = tokenId
        self.tokenIds = tokenIds
        self.approved = approved
        self.broadcast = broadcast
        self.lendingPool = lendingPool
        self.amount = amount
        self.atokenToRedeeem = atokenToRedeeem
        self.refCode = refCode
        self.interestRateMode = interestRateMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case to
        case data
        case input
        case value
        case nonce
        case gas
        case gasPrice
        case chainId = "chain_id"
        case encoding
        case EOA
        case contractAddress = "contract_address"
        case tokenId = "token_id"
        case tokenIds = "token_ids"
        case approved
        case broadcast
        case lendingPool = "lending_pool"
        case amount
        case atokenToRedeeem = "atoken_to_redeeem"
        case refCode = "ref_code"
        case interestRateMode = "interest_rate_mode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(input, forKey: .input)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(gas, forKey: .gas)
        try container.encodeIfPresent(gasPrice, forKey: .gasPrice)
        try container.encodeIfPresent(chainId, forKey: .chainId)
        try container.encodeIfPresent(encoding, forKey: .encoding)
        try container.encodeIfPresent(EOA, forKey: .EOA)
        try container.encodeIfPresent(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
        try container.encodeIfPresent(tokenIds, forKey: .tokenIds)
        try container.encodeIfPresent(approved, forKey: .approved)
        try container.encodeIfPresent(broadcast, forKey: .broadcast)
        try container.encodeIfPresent(lendingPool, forKey: .lendingPool)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(atokenToRedeeem, forKey: .atokenToRedeeem)
        try container.encodeIfPresent(refCode, forKey: .refCode)
        try container.encodeIfPresent(interestRateMode, forKey: .interestRateMode)
    }
}

