//
// CryptoCurrency.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CryptoCurrency: Codable, JSONEncodable, Hashable {

    public var networkDisplayName: String
    public var icon: String
    public var chainId: Double
    public var address: String
    public var decimals: Double
    public var network: String
    public var symbol: String
    public var name: String
    public var code: String
    public var id: String

    public init(networkDisplayName: String, icon: String, chainId: Double, address: String, decimals: Double, network: String, symbol: String, name: String, code: String, id: String) {
        self.networkDisplayName = networkDisplayName
        self.icon = icon
        self.chainId = chainId
        self.address = address
        self.decimals = decimals
        self.network = network
        self.symbol = symbol
        self.name = name
        self.code = code
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case networkDisplayName
        case icon
        case chainId
        case address
        case decimals
        case network
        case symbol
        case name
        case code
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(networkDisplayName, forKey: .networkDisplayName)
        try container.encode(icon, forKey: .icon)
        try container.encode(chainId, forKey: .chainId)
        try container.encode(address, forKey: .address)
        try container.encode(decimals, forKey: .decimals)
        try container.encode(network, forKey: .network)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(name, forKey: .name)
        try container.encode(code, forKey: .code)
        try container.encode(id, forKey: .id)
    }
}

