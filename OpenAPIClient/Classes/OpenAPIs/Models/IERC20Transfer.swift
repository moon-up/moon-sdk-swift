//
// IERC20Transfer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IERC20Transfer: Codable, JSONEncodable, Hashable {

    public var transactionHash: String
    public var contract: String
    public var logIndex: String
    public var from: String
    public var to: String
    public var value: String
    public var tokenDecimals: String
    public var tokenName: String
    public var tokenSymbol: String
    public var valueWithDecimals: String?
    public var triggers: [TriggerOutput]?

    public init(transactionHash: String, contract: String, logIndex: String, from: String, to: String, value: String, tokenDecimals: String, tokenName: String, tokenSymbol: String, valueWithDecimals: String? = nil, triggers: [TriggerOutput]? = nil) {
        self.transactionHash = transactionHash
        self.contract = contract
        self.logIndex = logIndex
        self.from = from
        self.to = to
        self.value = value
        self.tokenDecimals = tokenDecimals
        self.tokenName = tokenName
        self.tokenSymbol = tokenSymbol
        self.valueWithDecimals = valueWithDecimals
        self.triggers = triggers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactionHash
        case contract
        case logIndex
        case from
        case to
        case value
        case tokenDecimals
        case tokenName
        case tokenSymbol
        case valueWithDecimals
        case triggers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(contract, forKey: .contract)
        try container.encode(logIndex, forKey: .logIndex)
        try container.encode(from, forKey: .from)
        try container.encode(to, forKey: .to)
        try container.encode(value, forKey: .value)
        try container.encode(tokenDecimals, forKey: .tokenDecimals)
        try container.encode(tokenName, forKey: .tokenName)
        try container.encode(tokenSymbol, forKey: .tokenSymbol)
        try container.encodeIfPresent(valueWithDecimals, forKey: .valueWithDecimals)
        try container.encodeIfPresent(triggers, forKey: .triggers)
    }
}

