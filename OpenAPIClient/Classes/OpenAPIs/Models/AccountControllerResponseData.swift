//
// AccountControllerResponseData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AccountControllerResponseData: Codable, JSONEncodable, Hashable {

    public var nonce: Double
    public var balance: String
    public var moonScanUrl: String?
    public var transactionHash: String
    public var signedTransaction: String
    public var signedMessage: String?
    public var rawTransaction: String?
    public var signature: String?
    public var transaction: [String: Tx]?
    public var userOps: [TransactionRequest]?
    public var useropTransaction: String?
    public var keys: [String]?
    public var address: String
    public var name: String?
    public var data: String
    public var encoding: String?
    public var header: Bool?
    public var signtype: Bool?
    public var domain: String
    public var currentAtokenBalance: String
    public var currentBorrowBalance: String
    public var principalBorrowBalance: String
    public var borrowRateMode: String
    public var borrowRate: String
    public var liquidityRate: String
    public var originationFee: String
    public var variableBorrowIndex: String
    public var lastUpdateTimestamp: String
    public var usageAsCollateralEnabled: String
    public var symbol: String?
    public var decimals: String?
    public var totalSupply: String?
    public var contractAddress: String?
    public var balanceOf: String?
    public var allowance: String?
    public var balanceOf: String?
    public var balanceOfBatch: String?
    public var success: Bool
    public var message: String
    public var signedTx: String?
    public var ownerOf: String?
    public var tokenUri: String?
    public var isApprovedForAll: String?

    public init(nonce: Double, balance: String, moonScanUrl: String? = nil, transactionHash: String, signedTransaction: String, signedMessage: String? = nil, rawTransaction: String? = nil, signature: String? = nil, transaction: [String: Tx]? = nil, userOps: [TransactionRequest]? = nil, useropTransaction: String? = nil, keys: [String]? = nil, address: String, name: String? = nil, data: String, encoding: String? = nil, header: Bool? = nil, signtype: Bool? = nil, domain: String, currentAtokenBalance: String, currentBorrowBalance: String, principalBorrowBalance: String, borrowRateMode: String, borrowRate: String, liquidityRate: String, originationFee: String, variableBorrowIndex: String, lastUpdateTimestamp: String, usageAsCollateralEnabled: String, symbol: String? = nil, decimals: String? = nil, totalSupply: String? = nil, contractAddress: String? = nil, balanceOf: String? = nil, allowance: String? = nil, balanceOf: String? = nil, balanceOfBatch: String? = nil, success: Bool, message: String, signedTx: String? = nil, ownerOf: String? = nil, tokenUri: String? = nil, isApprovedForAll: String? = nil) {
        self.nonce = nonce
        self.balance = balance
        self.moonScanUrl = moonScanUrl
        self.transactionHash = transactionHash
        self.signedTransaction = signedTransaction
        self.signedMessage = signedMessage
        self.rawTransaction = rawTransaction
        self.signature = signature
        self.transaction = transaction
        self.userOps = userOps
        self.useropTransaction = useropTransaction
        self.keys = keys
        self.address = address
        self.name = name
        self.data = data
        self.encoding = encoding
        self.header = header
        self.signtype = signtype
        self.domain = domain
        self.currentAtokenBalance = currentAtokenBalance
        self.currentBorrowBalance = currentBorrowBalance
        self.principalBorrowBalance = principalBorrowBalance
        self.borrowRateMode = borrowRateMode
        self.borrowRate = borrowRate
        self.liquidityRate = liquidityRate
        self.originationFee = originationFee
        self.variableBorrowIndex = variableBorrowIndex
        self.lastUpdateTimestamp = lastUpdateTimestamp
        self.usageAsCollateralEnabled = usageAsCollateralEnabled
        self.symbol = symbol
        self.decimals = decimals
        self.totalSupply = totalSupply
        self.contractAddress = contractAddress
        self.balanceOf = balanceOf
        self.allowance = allowance
        self.balanceOf = balanceOf
        self.balanceOfBatch = balanceOfBatch
        self.success = success
        self.message = message
        self.signedTx = signedTx
        self.ownerOf = ownerOf
        self.tokenUri = tokenUri
        self.isApprovedForAll = isApprovedForAll
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nonce
        case balance
        case moonScanUrl = "moon_scan_url"
        case transactionHash = "transaction_hash"
        case signedTransaction = "signed_transaction"
        case signedMessage = "signed_message"
        case rawTransaction = "raw_transaction"
        case signature
        case transaction
        case userOps
        case useropTransaction = "userop_transaction"
        case keys
        case address
        case name
        case data
        case encoding
        case header
        case signtype
        case domain
        case currentAtokenBalance = "current_atoken_balance"
        case currentBorrowBalance = "current_borrow_balance"
        case principalBorrowBalance = "principal_borrow_balance"
        case borrowRateMode = "borrow_rate_mode"
        case borrowRate = "borrow_rate"
        case liquidityRate = "liquidity_rate"
        case originationFee = "origination_fee"
        case variableBorrowIndex = "variable_borrow_index"
        case lastUpdateTimestamp = "last_update_timestamp"
        case usageAsCollateralEnabled = "usage_as_collateral_enabled"
        case symbol
        case decimals
        case totalSupply
        case contractAddress = "contract_address"
        case balanceOf
        case allowance
        case balanceOf = "balance_of"
        case balanceOfBatch = "balance_of_batch"
        case success
        case message
        case signedTx
        case ownerOf = "owner_of"
        case tokenUri = "token_uri"
        case isApprovedForAll
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(balance, forKey: .balance)
        try container.encodeIfPresent(moonScanUrl, forKey: .moonScanUrl)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(signedTransaction, forKey: .signedTransaction)
        try container.encodeIfPresent(signedMessage, forKey: .signedMessage)
        try container.encodeIfPresent(rawTransaction, forKey: .rawTransaction)
        try container.encodeIfPresent(signature, forKey: .signature)
        try container.encodeIfPresent(transaction, forKey: .transaction)
        try container.encodeIfPresent(userOps, forKey: .userOps)
        try container.encodeIfPresent(useropTransaction, forKey: .useropTransaction)
        try container.encodeIfPresent(keys, forKey: .keys)
        try container.encode(address, forKey: .address)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(data, forKey: .data)
        try container.encodeIfPresent(encoding, forKey: .encoding)
        try container.encodeIfPresent(header, forKey: .header)
        try container.encodeIfPresent(signtype, forKey: .signtype)
        try container.encode(domain, forKey: .domain)
        try container.encode(currentAtokenBalance, forKey: .currentAtokenBalance)
        try container.encode(currentBorrowBalance, forKey: .currentBorrowBalance)
        try container.encode(principalBorrowBalance, forKey: .principalBorrowBalance)
        try container.encode(borrowRateMode, forKey: .borrowRateMode)
        try container.encode(borrowRate, forKey: .borrowRate)
        try container.encode(liquidityRate, forKey: .liquidityRate)
        try container.encode(originationFee, forKey: .originationFee)
        try container.encode(variableBorrowIndex, forKey: .variableBorrowIndex)
        try container.encode(lastUpdateTimestamp, forKey: .lastUpdateTimestamp)
        try container.encode(usageAsCollateralEnabled, forKey: .usageAsCollateralEnabled)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(decimals, forKey: .decimals)
        try container.encodeIfPresent(totalSupply, forKey: .totalSupply)
        try container.encodeIfPresent(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(balanceOf, forKey: .balanceOf)
        try container.encodeIfPresent(allowance, forKey: .allowance)
        try container.encodeIfPresent(balanceOf, forKey: .balanceOf)
        try container.encodeIfPresent(balanceOfBatch, forKey: .balanceOfBatch)
        try container.encode(success, forKey: .success)
        try container.encode(message, forKey: .message)
        try container.encodeIfPresent(signedTx, forKey: .signedTx)
        try container.encodeIfPresent(ownerOf, forKey: .ownerOf)
        try container.encodeIfPresent(tokenUri, forKey: .tokenUri)
        try container.encodeIfPresent(isApprovedForAll, forKey: .isApprovedForAll)
    }
}

