//
// Quote.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Quote: Codable, JSONEncodable, Hashable {

    public var recommendations: [String]
    public var paymentMethod: String
    public var quoteId: String
    public var ramp: String
    public var availablePaymentMethods: [AvailablePaymentMethod]
    public var payout: Double
    public var transactionFee: Double
    public var networkFee: Double
    public var rate: Double

    public init(recommendations: [String], paymentMethod: String, quoteId: String, ramp: String, availablePaymentMethods: [AvailablePaymentMethod], payout: Double, transactionFee: Double, networkFee: Double, rate: Double) {
        self.recommendations = recommendations
        self.paymentMethod = paymentMethod
        self.quoteId = quoteId
        self.ramp = ramp
        self.availablePaymentMethods = availablePaymentMethods
        self.payout = payout
        self.transactionFee = transactionFee
        self.networkFee = networkFee
        self.rate = rate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recommendations
        case paymentMethod
        case quoteId
        case ramp
        case availablePaymentMethods
        case payout
        case transactionFee
        case networkFee
        case rate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recommendations, forKey: .recommendations)
        try container.encode(paymentMethod, forKey: .paymentMethod)
        try container.encode(quoteId, forKey: .quoteId)
        try container.encode(ramp, forKey: .ramp)
        try container.encode(availablePaymentMethods, forKey: .availablePaymentMethods)
        try container.encode(payout, forKey: .payout)
        try container.encode(transactionFee, forKey: .transactionFee)
        try container.encode(networkFee, forKey: .networkFee)
        try container.encode(rate, forKey: .rate)
    }
}

