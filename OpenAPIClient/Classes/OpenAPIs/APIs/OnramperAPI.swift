//
// OnramperAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OnramperAPI {

    /**

     - parameter authorization: (header)  
     - parameter accountName: (path)  
     - parameter transactionInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperCheckout(authorization: String, accountName: String, transactionInput: TransactionInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperCheckoutWithRequestBuilder(authorization: authorization, accountName: accountName, transactionInput: transactionInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /onramper/fund/${accountName}
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter accountName: (path)  
     - parameter transactionInput: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func onRamperCheckoutWithRequestBuilder(authorization: String, accountName: String, transactionInput: TransactionInput) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/onramper/fund/${accountName}"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter crypto: (query)  
     - parameter amount: (query)  
     - parameter paymentMethod: (query)  (optional, default to "creditcard")
     - parameter uuid: (query)  (optional, default to "")
     - parameter clientName: (query)  (optional, default to "")
     - parameter country: (query)  (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetQuotesBuy(authorization: String, fiat: String, crypto: String, amount: Double, paymentMethod: String? = nil, uuid: String? = nil, clientName: String? = nil, country: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Quote]?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetQuotesBuyWithRequestBuilder(authorization: authorization, fiat: fiat, crypto: crypto, amount: amount, paymentMethod: paymentMethod, uuid: uuid, clientName: clientName, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/quotes/buy
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter crypto: (query)  
     - parameter amount: (query)  
     - parameter paymentMethod: (query)  (optional, default to "creditcard")
     - parameter uuid: (query)  (optional, default to "")
     - parameter clientName: (query)  (optional, default to "")
     - parameter country: (query)  (optional, default to "")
     - returns: RequestBuilder<[Quote]> 
     */
    open class func onRamperGetQuotesBuyWithRequestBuilder(authorization: String, fiat: String, crypto: String, amount: Double, paymentMethod: String? = nil, uuid: String? = nil, clientName: String? = nil, country: String? = nil) -> RequestBuilder<[Quote]> {
        let localVariablePath = "/onramper/quotes/buy"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fiat": (wrappedValue: fiat.encodeToJSON(), isExplode: true),
            "crypto": (wrappedValue: crypto.encodeToJSON(), isExplode: true),
            "amount": (wrappedValue: amount.encodeToJSON(), isExplode: true),
            "paymentMethod": (wrappedValue: paymentMethod?.encodeToJSON(), isExplode: true),
            "uuid": (wrappedValue: uuid?.encodeToJSON(), isExplode: true),
            "clientName": (wrappedValue: clientName?.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Quote]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter crypto: (query)  
     - parameter amount: (query)  
     - parameter paymentMethod: (query)  (optional, default to "creditcard")
     - parameter uuid: (query)  (optional, default to "")
     - parameter clientName: (query)  (optional, default to "")
     - parameter country: (query)  (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetQuotesSell(authorization: String, fiat: String, crypto: String, amount: Double, paymentMethod: String? = nil, uuid: String? = nil, clientName: String? = nil, country: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SellQuote]?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetQuotesSellWithRequestBuilder(authorization: authorization, fiat: fiat, crypto: crypto, amount: amount, paymentMethod: paymentMethod, uuid: uuid, clientName: clientName, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/quotes/sell
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter crypto: (query)  
     - parameter amount: (query)  
     - parameter paymentMethod: (query)  (optional, default to "creditcard")
     - parameter uuid: (query)  (optional, default to "")
     - parameter clientName: (query)  (optional, default to "")
     - parameter country: (query)  (optional, default to "")
     - returns: RequestBuilder<[SellQuote]> 
     */
    open class func onRamperGetQuotesSellWithRequestBuilder(authorization: String, fiat: String, crypto: String, amount: Double, paymentMethod: String? = nil, uuid: String? = nil, clientName: String? = nil, country: String? = nil) -> RequestBuilder<[SellQuote]> {
        let localVariablePath = "/onramper/quotes/sell"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fiat": (wrappedValue: fiat.encodeToJSON(), isExplode: true),
            "crypto": (wrappedValue: crypto.encodeToJSON(), isExplode: true),
            "amount": (wrappedValue: amount.encodeToJSON(), isExplode: true),
            "paymentMethod": (wrappedValue: paymentMethod?.encodeToJSON(), isExplode: true),
            "uuid": (wrappedValue: uuid?.encodeToJSON(), isExplode: true),
            "clientName": (wrappedValue: clientName?.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SellQuote]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter source: (query)  
     - parameter country: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedAssets(authorization: String, source: String, country: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SupportedAssetResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedAssetsWithRequestBuilder(authorization: authorization, source: source, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/assets
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter source: (query)  
     - parameter country: (query)  
     - returns: RequestBuilder<SupportedAssetResponse> 
     */
    open class func onRamperGetSupportedAssetsWithRequestBuilder(authorization: String, source: String, country: String) -> RequestBuilder<SupportedAssetResponse> {
        let localVariablePath = "/onramper/assets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "source": (wrappedValue: source.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SupportedAssetResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter type: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedCurrencies(authorization: String, type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SupportedCurrenciesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedCurrenciesWithRequestBuilder(authorization: authorization, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/currencies
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter type: (query)  
     - returns: RequestBuilder<SupportedCurrenciesResponse> 
     */
    open class func onRamperGetSupportedCurrenciesWithRequestBuilder(authorization: String, type: String) -> RequestBuilder<SupportedCurrenciesResponse> {
        let localVariablePath = "/onramper/currencies"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SupportedCurrenciesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter country: (query)  
     - parameter type: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedDefaultsAll(authorization: String, country: String, type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SupportedDefaultResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedDefaultsAllWithRequestBuilder(authorization: authorization, country: country, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/defaults
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter country: (query)  
     - parameter type: (query)  
     - returns: RequestBuilder<SupportedDefaultResponse> 
     */
    open class func onRamperGetSupportedDefaultsAllWithRequestBuilder(authorization: String, country: String, type: String) -> RequestBuilder<SupportedDefaultResponse> {
        let localVariablePath = "/onramper/defaults"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SupportedDefaultResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedOnRampsAll(authorization: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSupportedOnRampsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedOnRampsAllWithRequestBuilder(authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/onramps
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - returns: RequestBuilder<GetSupportedOnRampsResponse> 
     */
    open class func onRamperGetSupportedOnRampsAllWithRequestBuilder(authorization: String) -> RequestBuilder<GetSupportedOnRampsResponse> {
        let localVariablePath = "/onramper/onramps"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSupportedOnRampsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter country: (query)  
     - parameter type: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedPaymentTypes(authorization: String, fiat: String, country: String, type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SupportedPaymentTypesCurrencyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedPaymentTypesWithRequestBuilder(authorization: authorization, fiat: fiat, country: country, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/payment-types
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter country: (query)  
     - parameter type: (query)  
     - returns: RequestBuilder<SupportedPaymentTypesCurrencyResponse> 
     */
    open class func onRamperGetSupportedPaymentTypesWithRequestBuilder(authorization: String, fiat: String, country: String, type: String) -> RequestBuilder<SupportedPaymentTypesCurrencyResponse> {
        let localVariablePath = "/onramper/payment-types"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fiat": (wrappedValue: fiat.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SupportedPaymentTypesCurrencyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter country: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func onRamperGetSupportedPaymentTypesFiat(authorization: String, fiat: String, country: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SupportedPaymentTypesCurrencyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return onRamperGetSupportedPaymentTypesFiatWithRequestBuilder(authorization: authorization, fiat: fiat, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /onramper/payment-types/fiat
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter authorization: (header)  
     - parameter fiat: (query)  
     - parameter country: (query)  
     - returns: RequestBuilder<SupportedPaymentTypesCurrencyResponse> 
     */
    open class func onRamperGetSupportedPaymentTypesFiatWithRequestBuilder(authorization: String, fiat: String, country: String) -> RequestBuilder<SupportedPaymentTypesCurrencyResponse> {
        let localVariablePath = "/onramper/payment-types/fiat"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fiat": (wrappedValue: fiat.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SupportedPaymentTypesCurrencyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
