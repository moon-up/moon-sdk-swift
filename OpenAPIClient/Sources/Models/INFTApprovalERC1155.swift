//
// INFTApprovalERC1155.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct INFTApprovalERC1155: Codable {
    public var transactionHash: String
    public var contract: String
    public var logIndex: String
    public var account: String
    public var _operator: String
    public var approved: Bool
    public var tokenContractType: String
    public var tokenName: String
    public var tokenSymbol: String

    public init(transactionHash: String, contract: String, logIndex: String, account: String, _operator: String, approved: Bool, tokenContractType: String, tokenName: String, tokenSymbol: String) {
        self.transactionHash = transactionHash
        self.contract = contract
        self.logIndex = logIndex
        self.account = account
        self._operator = _operator
        self.approved = approved
        self.tokenContractType = tokenContractType
        self.tokenName = tokenName
        self.tokenSymbol = tokenSymbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactionHash
        case contract
        case logIndex
        case account
        case _operator = "operator"
        case approved
        case tokenContractType
        case tokenName
        case tokenSymbol
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        transactionHash = try container.decode(String.self, forKey: .transactionHash)
        contract = try container.decode(String.self, forKey: .contract)
        logIndex = try container.decode(String.self, forKey: .logIndex)
        account = try container.decode(String.self, forKey: .account)
        _operator = try container.decode(String.self, forKey: ._operator)
        approved = try container.decode(Bool.self, forKey: .approved)
        tokenContractType = try container.decode(String.self, forKey: .tokenContractType)
        tokenName = try container.decode(String.self, forKey: .tokenName)
        tokenSymbol = try container.decode(String.self, forKey: .tokenSymbol)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(contract, forKey: .contract)
        try container.encode(logIndex, forKey: .logIndex)
        try container.encode(account, forKey: .account)
        try container.encode(_operator, forKey: ._operator)
        try container.encode(approved, forKey: .approved)
        try container.encode(tokenContractType, forKey: .tokenContractType)
        try container.encode(tokenName, forKey: .tokenName)
        try container.encode(tokenSymbol, forKey: .tokenSymbol)
    }
}
