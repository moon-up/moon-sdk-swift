//
// INFTTransfer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct INFTTransfer: Codable {
    public var transactionHash: String
    public var contract: String
    public var logIndex: String
    public var tokenContractType: String
    public var tokenName: String
    public var tokenSymbol: String
    public var triggers: [TriggerOutput]?
    public var _operator: String?
    public var from: String
    public var to: String
    public var tokenId: String
    public var amount: String

    public init(transactionHash: String, contract: String, logIndex: String, tokenContractType: String, tokenName: String, tokenSymbol: String, triggers: [TriggerOutput]? = nil, _operator: String?, from: String, to: String, tokenId: String, amount: String) {
        self.transactionHash = transactionHash
        self.contract = contract
        self.logIndex = logIndex
        self.tokenContractType = tokenContractType
        self.tokenName = tokenName
        self.tokenSymbol = tokenSymbol
        self.triggers = triggers
        self._operator = _operator
        self.from = from
        self.to = to
        self.tokenId = tokenId
        self.amount = amount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactionHash
        case contract
        case logIndex
        case tokenContractType
        case tokenName
        case tokenSymbol
        case triggers
        case _operator = "operator"
        case from
        case to
        case tokenId
        case amount
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        transactionHash = try container.decode(String.self, forKey: .transactionHash)
        contract = try container.decode(String.self, forKey: .contract)
        logIndex = try container.decode(String.self, forKey: .logIndex)
        tokenContractType = try container.decode(String.self, forKey: .tokenContractType)
        tokenName = try container.decode(String.self, forKey: .tokenName)
        tokenSymbol = try container.decode(String.self, forKey: .tokenSymbol)
        triggers = try container.decodeIfPresent([TriggerOutput].self, forKey: .triggers)
        _operator = try container.decode(String.self, forKey: ._operator)
        from = try container.decode(String.self, forKey: .from)
        to = try container.decode(String.self, forKey: .to)
        tokenId = try container.decode(String.self, forKey: .tokenId)
        amount = try container.decode(String.self, forKey: .amount)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(contract, forKey: .contract)
        try container.encode(logIndex, forKey: .logIndex)
        try container.encode(tokenContractType, forKey: .tokenContractType)
        try container.encode(tokenName, forKey: .tokenName)
        try container.encode(tokenSymbol, forKey: .tokenSymbol)
        try container.encodeIfPresent(triggers, forKey: .triggers)
        try container.encode(_operator, forKey: ._operator)
        try container.encode(from, forKey: .from)
        try container.encode(to, forKey: .to)
        try container.encode(tokenId, forKey: .tokenId)
        try container.encode(amount, forKey: .amount)
    }
}
