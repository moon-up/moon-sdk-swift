//
// AaveReservesData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AaveReservesData: Codable {
    public var currentAtokenBalance: String
    public var currentBorrowBalance: String
    public var principalBorrowBalance: String
    public var borrowRateMode: String
    public var borrowRate: String
    public var liquidityRate: String
    public var originationFee: String
    public var variableBorrowIndex: String
    public var lastUpdateTimestamp: String
    public var usageAsCollateralEnabled: String

    public init(currentAtokenBalance: String, currentBorrowBalance: String, principalBorrowBalance: String, borrowRateMode: String, borrowRate: String, liquidityRate: String, originationFee: String, variableBorrowIndex: String, lastUpdateTimestamp: String, usageAsCollateralEnabled: String) {
        self.currentAtokenBalance = currentAtokenBalance
        self.currentBorrowBalance = currentBorrowBalance
        self.principalBorrowBalance = principalBorrowBalance
        self.borrowRateMode = borrowRateMode
        self.borrowRate = borrowRate
        self.liquidityRate = liquidityRate
        self.originationFee = originationFee
        self.variableBorrowIndex = variableBorrowIndex
        self.lastUpdateTimestamp = lastUpdateTimestamp
        self.usageAsCollateralEnabled = usageAsCollateralEnabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentAtokenBalance = "current_atoken_balance"
        case currentBorrowBalance = "current_borrow_balance"
        case principalBorrowBalance = "principal_borrow_balance"
        case borrowRateMode = "borrow_rate_mode"
        case borrowRate = "borrow_rate"
        case liquidityRate = "liquidity_rate"
        case originationFee = "origination_fee"
        case variableBorrowIndex = "variable_borrow_index"
        case lastUpdateTimestamp = "last_update_timestamp"
        case usageAsCollateralEnabled = "usage_as_collateral_enabled"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        currentAtokenBalance = try container.decode(String.self, forKey: .currentAtokenBalance)
        currentBorrowBalance = try container.decode(String.self, forKey: .currentBorrowBalance)
        principalBorrowBalance = try container.decode(String.self, forKey: .principalBorrowBalance)
        borrowRateMode = try container.decode(String.self, forKey: .borrowRateMode)
        borrowRate = try container.decode(String.self, forKey: .borrowRate)
        liquidityRate = try container.decode(String.self, forKey: .liquidityRate)
        originationFee = try container.decode(String.self, forKey: .originationFee)
        variableBorrowIndex = try container.decode(String.self, forKey: .variableBorrowIndex)
        lastUpdateTimestamp = try container.decode(String.self, forKey: .lastUpdateTimestamp)
        usageAsCollateralEnabled = try container.decode(String.self, forKey: .usageAsCollateralEnabled)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(currentAtokenBalance, forKey: .currentAtokenBalance)
        try container.encode(currentBorrowBalance, forKey: .currentBorrowBalance)
        try container.encode(principalBorrowBalance, forKey: .principalBorrowBalance)
        try container.encode(borrowRateMode, forKey: .borrowRateMode)
        try container.encode(borrowRate, forKey: .borrowRate)
        try container.encode(liquidityRate, forKey: .liquidityRate)
        try container.encode(originationFee, forKey: .originationFee)
        try container.encode(variableBorrowIndex, forKey: .variableBorrowIndex)
        try container.encode(lastUpdateTimestamp, forKey: .lastUpdateTimestamp)
        try container.encode(usageAsCollateralEnabled, forKey: .usageAsCollateralEnabled)
    }
}
